name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_DEFAULT_REGION: ap-southeast-2
  NODE_VERSION: '18'
  STACK_NAME: CipherProjectsStack

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install dependencies once
      - name: Install Next.js Dependencies
        run: npm ci

      # Handle ESLint
      - name: Create ESLint config
        run: |
          echo '{
            "extends": "next/core-web-plugins",
            "rules": {
              "react/no-unescaped-entities": "off",
              "@next/next/no-img-element": "off"
            }
          }' > .eslintrc.json

      - name: Run ESLint
        run: |
          npm run lint || true
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # CDK deployment
      - name: Install CDK Dependencies
        working-directory: cipher-infra
        run: |
          npm ci
          npm install -g aws-cdk

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy Infrastructure
        working-directory: cipher-infra
        run: |
          cdk deploy --require-approval never
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`DeploymentBucketName`].OutputValue' --output text)
          echo "DEPLOY_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
          EC2_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`InstanceId`].OutputValue' --output text)
          echo "EC2_INSTANCE_ID=$EC2_ID" >> $GITHUB_ENV

      # Build and deploy application
      - name: Build Next.js
        run: npm run build

      - name: Package Application
        run: |
          zip -r deploy.zip .next package.json package-lock.json public next.config.js

      - name: Deploy to EC2
        run: |
          aws s3 cp deploy.zip s3://${{ env.DEPLOY_BUCKET }}/deploy.zip
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=['${{ env.EC2_INSTANCE_ID }}']" \
            --parameters 'commands=[
              "cd /var/www/cipher-projects",
              "aws s3 cp s3://${{ env.DEPLOY_BUCKET }}/deploy.zip .",
              "unzip -o deploy.zip",
              "npm ci --production",
              "pm2 restart cipher-projects || pm2 start npm --name \"cipher-projects\" -- start"
            ]' \
            --output text

      - name: Verify Deployment
        run: |
          echo "Deployed to EC2 instance: ${{ env.EC2_INSTANCE_ID }}"
          echo "CloudFront domain: $(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDomain`].OutputValue' --output text)"